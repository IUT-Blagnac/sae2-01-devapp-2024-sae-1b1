:toc: preamble
:toc-title: Table des Matières
:docTech: ../media/DocTech/
:useCases: {docTech}UseCase/
:diagClass: {docTech}DigClasse/
:autre: {docTech}/Autre/
= Documentation Technique application Daily Bank


image:../media/image_univ.jpg[image,width=97,height=137]

Université de Toulouse

IUT de Blagnac

Département Informatique

Documentation Technique

SAE 2.01

image:../media/image_doc_tech.jpg[image,width=565,height=374]

____
*_Nom : BOULOUIHA Yassir, HANKI Wissal, DELAPAGNE Titouan, FIGUERAS
Clara_*
____

_Informatique 1^ière^ Année_

Version 1.1

A destination l'entreprise DailyBank

== L'application DailyBank

== 1 Architecture

== 2 Fonctionnalités

=== 2.1 Créer un Compte B.Y

==== 2.1.1 Use Case

image:{useCases}CreerCompte.png[UCCreerCompte]

Les utilisateurs concernés par cette fonctionnalité sont le Guichetier et le chef d'Agence.

==== 2.1.2 Diagramme de classes

image:{diagClass}CreerCompte.png[DCCreerCompte]

La classe utilisée pour inserer un compte sur la base de données est la classe `CompteCourant`.

* application.control :  
** `ComptesManagement`
** `CompteEditorPane`

* application.view :
** `ComptesManagementViewController`
** `CompteEditorPaneViewController`

* model.data :
** `CompteCourant`

* model.orm :
** `LogToDataBase`

==== 2.1.3 Code commenté

La fonctionnalité de création de compte est principalement codée dans la fonction `creerNouveauCompte()` de la classe `ComptesManagement`. Cette fonction permet d'insérer un compte dans la base de données en effectuant une première requête pour récupérer le plus grand ID de compte présent dans la table `CompteCourant`, puis en ajoutant 1 pour générer l'ID du nouveau compte à insérer. Ensuite, la seconde requête permet d'insérer le compte dans la base de données. Après cela, la méthode `reloadList()` de la classe `ComptesManagementViewController` est appelée pour recharger la liste des comptes présents dans la fenêtre, permettant ainsi à l'utilisateur de voir et d'interagir directement avec le nouveau compte. après sa création.

`ComptesManagementViewController` va donc appeler `creerNouveauCompte()` de la classe `ComptesManagement` lorsque l'utilisateur cliquera sur "Nouveau Compte" (`ComptesManagementViewController.doNouveauCompte()`). `creerNouveauCompte()` affichera la page permettant de renseigner les informations du nouveau compte en appelant `doCompteEditorDialog()` de la classe `CompteEditorPane`, qui à son tour retourne l'appel de `displayDialog()` de la classe `CompteEditorPaneViewController`, affichant ainsi réellement la fenêtre d'ajout de compte.



=== 2.2.1 Créditer un Compte B.Y

image:{useCases}CrediterCompte.png[UCCrediterCompte]

Les utilisateurs concernés par cette fonctionnalité sont le Guichetier et le chef d'Agence.

==== 2.2.2 Diagramme de classes

image:{diagClass}Operation.png[DCOperation]

La classe utilisée pour créditer un compte est la classe `Operation`.

Répartition des classes utilisées dans les packages :

* application.control :  
** `OperationsManagement`
** `OperationEditorPane`

* application.view :
** `OperationsManagementViewController`
** `OperationEditorPaneViewController`

* model.data :
** `Operation`

* model.orm :
** `LogToDataBase`

==== 2.2.3 Code commenté

Pour créditer un compte, j'ai d'abord complété la fonction `displayDialog()` dans la classe `OperationEditorPaneViewController`, en particulier pour le cas "CREDIT" du switch case. Cette fonction affiche une fenêtre permettant de récupérer les informations relatives au crédit. Une fois les informations saisies, cette fonction retourne l'opération sous forme d'un objet de type `Operation`.

Le cœur du processus se trouve dans la fonction `enregistrerCredit()` de la classe OperationManagement. Cette fonction reçoit l'opération de crédit à enregistrer via la méthode `doOperationEditorDialog()` de la classe `OperationEditorPane`, qui appelle en retour la fonction `displayDialog()` mentionnée précédemment.

La fonction `enregistrerCredit()` crée une connexion à la base de données à l'aide de la classe LogToDataBase. Dans un premier temps, elle exécute une requête pour obtenir le plus grand ID d'opération présent dans la table `Operation` et ajoute 1, ce qui permet de déterminer l'ID de la nouvelle opération à insérer. Ensuite, elle exécute une deuxième requête pour insérer l'opération de crédit dans la base de données en utilisant les informations contenues dans l'objet `Operation` récupéré. 

=== 2.3 Effectuer un Virement D.T

==== 2.3.1 Use case
==== 2.3.2 Diagramme de classes
==== 2.3.3 Code commenté

=== 2.4 Modifier et Cloturer un Compte D.T

==== 2.4.1 Use case
==== 2.4.2 Diagramme de classes
==== 2.4.3 Code commenté

=== 2.5 Créer un prélevement automatique B.Y
==== 2.5.1 Use case
==== 2.5.2 Diagramme de classes
==== 2.5.3 Code commenté

=== 2.6 Obtenir et Afficher les prélevements automatiques B.Y

==== 2.6.1 Use case
==== 2.6.2 Diagramme de classes
==== 2.6.3 Code commenté

=== 2.7 Modifier un prélevement automatique D.T

==== 2.7.1 Use case
==== 2.7.2 Diagramme de classes
==== 2.7.3 Code commenté

=== 2.8 Supprimer/Arreter un prélevement automatique D.T
==== 2.8.1 Use case
==== 2.8.2 Diagramme de classes
==== 2.8.3 Code commenté


=== 2.9 Générer un relevé pdf F.C

==== 2.9.1 Use case
==== 2.9.2 Diagramme de classes
==== 2.9.3 Code commenté


=== 2.10 Créer un Employe H.W

==== 2.10.1 Use case
image:{usecases}usecasecreeremploye.png[UCCrediterCompte]

La classe utilisée pour inserer un compte sur la base de données est la classe `Employe`.

==== 2.10.2 Diagramme de classes


* application.control :  
** `EmployeManagement`
** `EmployeEditorPane`

* application.view :
** `EmployeManagementViewController`
** `EmployeEditorPaneViewController`

* model.data :
** `Employe`

* model.orm :
** `Acces_BD_Employe`

==== 2.10.3 Code commenté

Pour afficher la liste des employés dans cette application, j'ai d'abord créé les classes : `EmployeManagement`, `EmployeEditorPane`, `EmployeManagementViewController` et `EmployeEditorPaneViewController`. Lorsqu'un utilisateur souhaite crée  un nouveau employé (en utilisant la méthode `nouveauEmploye()`), il ajoute un employe apres avor remplir le champs qui correspond au nom, prénom, etc... dans les champs de texte appropriés.



=== 2.11 Afficher Employe H.W

==== 2.11.1 Use case
image:{useCases}AfficherEmploye.png[UCCrediterCompte]

Les utilisateurs concernés par cette fonctionnalité sont les chefs d'Agence.


==== 2.11.2 Diagramme de classes



La classe utilisée pour créer un employe est la classe `Employe`.

Répartition des classes utilisées dans les packages :

* application.control :  
** `EmployeManagement`
** `EmployeEditorPane`

* application.view :
** `EmployeManagementViewController`
** `EmployeEditorPaneViewController`

* model.data :
** `Employe`

* model.orm :
  ** `Access_BD_Employe`

==== 2.11.3 Code commenté

Pour afficher la liste des employés dans cette application, j'ai d'abord créé les classes : `EmployeManagement`, `EmployeEditorPane`, `EmployeManagementViewController` et `EmployeEditorPaneViewController`. Lorsqu'un utilisateur souhaite rechercher des employés (en utilisant la méthode `doRechercher()`), il peut entrer un nom ou un prénom dans les champs de texte appropriés. Ensuite, la méthode appelle `cmDialogController.getlisteEmployes()` pour récupérer la liste des employés correspondant aux critères de recherche.

J'ai également utilisé la liste observable des employés `oListEmploye` pour stocker les objets de type `Employe`. Cette liste permet de lier dynamiquement ces données à un composant d'interface utilisateur comme `ListView`, assurant ainsi que toute modification de la liste est automatiquement reflétée dans l'interface utilisateur.

=== 2.12 Débit exeptionnel d'un Compte F.C

==== 2.12.1 Use case
==== 2.12.2 Diagramme de classes
==== 2.12.3 Code commenté

=== 2.13 Supprimer un employé F.C

==== 2.13.1 Use case
==== 2.13.2 Diagramme de classes
==== 2.13.3 Code commenté

=== 2.14 Modifier un employé F.C

==== 2.14.1 Use case
==== 2.14.2 Diagramme de classes
==== 2.14.3 Code commenté

=== 2.15  Simulation Emprunt H.W

==== 2.15.1 Use case
==== 2.15.2 Diagramme de classes
==== 2.15.3 Code commenté

=== 2.16 Simulation Assurance H.W

==== 2.16.1 Use case
==== 2.16.2 Diagramme de classes
==== 2.16.3 Code commenté